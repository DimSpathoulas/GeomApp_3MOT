import numpy as np


class Covariance(object):
    '''
    Define different Kalman Filter covariance matrix
    Kalman Filter states:
    [x, y, z, rot_y, l, w, h, x_dot, y_dot, z_dot]
    '''

    def __init__(self):
        self.num_states = 11  # with angular velocity

        self.num_observations = 7
        self.P = np.eye(self.num_states)
        self.Q = np.eye(self.num_states)
        self.R = np.eye(self.num_observations)

        NUSCENES_TRACKING_NAMES = [
            'bicycle',
            'bus',
            'car',
            'motorcycle',
            'pedestrian',
            'trailer',
            'truck'
        ]

        # Kalman Filter state: [x, y, z, rot_z, l, w, h, x_dot, y_dot, z_dot, rot_z_dot]

        P = {
            'bicycle': [0.04389963, 0.03891063, 0.04684107, 2.07620071, 0.03344048, 0.01459256, 0.0179011,
                        0.04024432, 0.03308606, 0.01506674, 1.9300115],
            'bus': [0.17546469, 0.13818929, 0.05947248, 0.1979503, 0.78867322, 0.05507407, 0.06684149, 0.13263319,
                    0.11508148, 0.05033665, 0.22529652],
            'car': [0.15076521, 0.15217449, 0.12870418, 2.13320267, 0.20512433, 0.12298498, 0.12266131, 
                    0.13301909, 0.1325577, 0.11168534, 2.02087396],
            'motorcycle': [0.14282156, 0.14551483, 0.12464308, 2.51558426, 0.15109268, 0.1145726, 0.11619681,
                           0.1379135 , 0.13833368, 0.11196864, 2.44627295],
            'pedestrian': [0.04515334, 0.04249591, 0.02385418, 2.2126983,  0.02502636, 0.01470147, 0.02032242,
                          4.98518293e-02, 4.68486146e-02, 1.06178839e-02, 1.92090617e+00],
            'trailer': [0.085356  , 0.08847322, 0.1784289 , 2.48101115, 0.98885655, 0.06104183, 0.09248428,
                        0.08043277, 0.07315326, 0.03804438, 2.08558042],
            'truck': [0.14862173, 0.1444596, 0.05417157, 1.73122169, 0.69387238, 0.05484365, 0.07748085, 0.10683797,
                      0.10248689, 0.0378078, 1.76188901]
        }

        Q = {
            'bicycle': [1.98881347e-02, 1.36552276e-02, 5.10175742e-03, 1.33430252e-01, 0, 0, 0, 1.98881347e-02,
                        1.36552276e-02, 5.10175742e-03, 1.33430252e-01],
            'bus': [1.17729925e-01, 8.84659079e-02, 1.17616440e-02, 2.09050032e-01, 0, 0, 0, 1.17729925e-01,
                    8.84659079e-02, 1.17616440e-02, 2.09050032e-01],
            'car': [1.58918523e-01, 1.24935318e-01, 5.35573165e-03, 9.22800791e-02, 0, 0, 0, 1.58918523e-01,
                    1.24935318e-01, 5.35573165e-03, 9.22800791e-02],
            'motorcycle': [3.23647590e-02, 3.86650974e-02, 5.47421635e-03, 2.34967407e-01, 0, 0, 0, 3.23647590e-02,
                           3.86650974e-02, 5.47421635e-03, 2.34967407e-01],
            'pedestrian': [3.34814566e-02, 2.47354921e-02, 5.94592529e-03, 4.24962535e-01, 0, 0, 0, 3.34814566e-02,
                           2.47354921e-02, 5.94592529e-03, 4.24962535e-01],
            'trailer': [4.19985099e-02, 3.68661552e-02, 1.19415050e-02, 5.63166240e-02, 0, 0, 0, 4.19985099e-02,
                        3.68661552e-02, 1.19415050e-02, 5.63166240e-02],
            'truck': [9.45275998e-02, 9.45620374e-02, 8.38061721e-03, 1.41680460e-01, 0, 0, 0, 9.45275998e-02,
                      9.45620374e-02, 8.38061721e-03, 1.41680460e-01]
        }

        # noise
        R = {
            'bicycle': [0.04389963, 0.03891063, 0.04684107, 2.07620071, 0.03344048, 0.01459256, 0.0179011],
            'bus': [0.17546469, 0.13818929, 0.05947248, 0.1979503, 0.78867322, 0.05507407, 0.06684149],
            'car': [0.15076521, 0.15217449, 0.12870418, 2.13320267, 0.20512433, 0.12298498, 0.12266131],
            'motorcycle': [0.14282156, 0.14551483, 0.12464308, 2.51558426, 0.15109268, 0.1145726, 0.11619681],
            'pedestrian': [0.04515334, 0.04249591, 0.02385418, 2.2126983,  0.02502636, 0.01470147, 0.02032242],
            'trailer': [0.085356  , 0.08847322, 0.1784289 , 2.48101115, 0.98885655, 0.06104183, 0.09248428],
            'truck': [0.14862173, 0.1444596, 0.05417157, 1.73122169, 0.69387238, 0.05484365, 0.07748085]
        }

        self.P = {tracking_name: np.diag(P[tracking_name]) for tracking_name in NUSCENES_TRACKING_NAMES}
        self.Q = {tracking_name: np.diag(Q[tracking_name]) for tracking_name in NUSCENES_TRACKING_NAMES}
        self.R = {tracking_name: np.diag(R[tracking_name]) for tracking_name in NUSCENES_TRACKING_NAMES}
