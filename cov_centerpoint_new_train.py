import numpy as np


class Covariance(object):
    '''
    Define different Kalman Filter covariance matrix
    Kalman Filter states:
    [x, y, z, rot_y, l, w, h, x_dot, y_dot, z_dot]
    '''

    def __init__(self):
        self.num_states = 11  # with angular velocity

        self.num_observations = 7
        self.P = np.eye(self.num_states)
        self.Q = np.eye(self.num_states)
        self.R = np.eye(self.num_observations)

        NUSCENES_TRACKING_NAMES = [
            'bicycle',
            'bus',
            'car',
            'motorcycle',
            'pedestrian',
            'trailer',
            'truck'
        ]

        # Kalman Filter state: [x, y, z, rot_z, l, w, h, x_dot, y_dot, z_dot, rot_z_dot]

        P = {
            'bicycle': [0.02407203, 0.02209903, 0.04217246, 0.89757175,  0.0316104, 0.01239508, 0.01364093,
                        0.01273522, 0.01175986, 0.00955015, 0.78908627],
            'bus': [0.07781852, 0.06434054, 0.07979971, 0.13068914, 0.47525387, 0.05975163, 0.11665211, 
                   0.05972582, 0.05241432, 0.03750725, 0.13119236],
            'car': [0.02823841, 0.03032612, 0.02290507, 0.41408362, 0.09676599, 0.02287881, 0.02101404, 
                    0.0151237 , 0.01490916, 0.00908081, 0.37429541],
            'motorcycle': [0.02747214, 0.02893297, 0.02208599, 0.48059408,  0.04920994, 0.01459814, 0.0145625,
                           0.01774043, 0.01951357, 0.00905213, 0.48504538],
            'pedestrian': [0.02836891, 0.02768213, 0.02006411, 0.46741488,  0.02575363, 0.01451548, 0.01801471,
                          0.02389093, 0.02446591, 0.00838452, 0.27054176],
            'trailer': [0.08539036, 0.08412406, 0.17552924, 1.35771162, 0.8653108, 0.08382407, 0.10121517,
                        0.06577631, 0.05921743, 0.03876849, 0.6235674],
            'truck': [0.05376891, 0.0534635 , 0.19167353, 0.19464259, 0.41880073, 0.05604275, 0.07146559, 
                      0.02879667, 0.02721285, 0.01755548, 0.15098572]
        }

        Q = {
            'bicycle': [1.98881347e-02, 1.36552276e-02, 5.10175742e-03, 1.33430252e-01, 0, 0, 0, 1.98881347e-02,
                        1.36552276e-02, 5.10175742e-03, 1.33430252e-01],
            'bus': [1.17729925e-01, 8.84659079e-02, 1.17616440e-02, 2.09050032e-01, 0, 0, 0, 1.17729925e-01,
                    8.84659079e-02, 1.17616440e-02, 2.09050032e-01],
            'car': [1.58918523e-01, 1.24935318e-01, 5.35573165e-03, 9.22800791e-02, 0, 0, 0, 1.58918523e-01,
                    1.24935318e-01, 5.35573165e-03, 9.22800791e-02],
            'motorcycle': [3.23647590e-02, 3.86650974e-02, 5.47421635e-03, 2.34967407e-01, 0, 0, 0, 3.23647590e-02,
                           3.86650974e-02, 5.47421635e-03, 2.34967407e-01],
            'pedestrian': [3.34814566e-02, 2.47354921e-02, 5.94592529e-03, 4.24962535e-01, 0, 0, 0, 3.34814566e-02,
                           2.47354921e-02, 5.94592529e-03, 4.24962535e-01],
            'trailer': [4.19985099e-02, 3.68661552e-02, 1.19415050e-02, 5.63166240e-02, 0, 0, 0, 4.19985099e-02,
                        3.68661552e-02, 1.19415050e-02, 5.63166240e-02],
            'truck': [9.45275998e-02, 9.45620374e-02, 8.38061721e-03, 1.41680460e-01, 0, 0, 0, 9.45275998e-02,
                      9.45620374e-02, 8.38061721e-03, 1.41680460e-01]
        }

        # noise
        R = {
            'bicycle': [0.02407203, 0.02209903, 0.04217246, 0.89757175,  0.0316104, 0.01239508, 0.01364093],
            'bus': [0.07781852, 0.06434054, 0.07979971, 0.13068914, 0.47525387, 0.05975163, 0.11665211],
            'car': [0.02823841, 0.03032612, 0.02290507, 0.41408362, 0.09676599, 0.02287881, 0.02101404],
            'motorcycle': [0.02747214, 0.02893297, 0.02208599, 0.48059408,  0.04920994, 0.01459814, 0.0145625],
            'pedestrian': [0.02836891, 0.02768213, 0.02006411, 0.46741488,  0.02575363, 0.01451548, 0.01801471],
            'trailer': [0.08539036, 0.08412406, 0.17552924, 1.35771162, 0.8653108, 0.08382407, 0.10121517],
            'truck': [0.05376891, 0.0534635 , 0.19167353, 0.19464259, 0.41880073, 0.05604275, 0.07146559]
        }

        self.P = {tracking_name: np.diag(P[tracking_name]) for tracking_name in NUSCENES_TRACKING_NAMES}
        self.Q = {tracking_name: np.diag(Q[tracking_name]) for tracking_name in NUSCENES_TRACKING_NAMES}
        self.R = {tracking_name: np.diag(R[tracking_name]) for tracking_name in NUSCENES_TRACKING_NAMES}
